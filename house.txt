import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt


# Load the dataset (replace 'house_data.csv' with your dataset)
data = pd.read_csv('/content/house price data.csv')

# Explore the dataset (optional)
print(data.head())
print(data.describe())
print(data.info())

#remove null and duplicate values
data.dropna(inplace=True)
data.drop_duplicates(inplace=True)

# Select features and target
X = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront']]
y = data['price']

# Split the data into training and testing sets
X = data.drop('price', axis=1)
y = data['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training data shape: ", X_train.shape, y_train.shape)
print("Testing data shape: ", X_test.shape, y_test.shape)

# Handle missing values if necessary
data.dropna(inplace=True)

# Split the data into features (X) and target variable (y)
X = data[['price']]
y = data[['sqft_living']]

# Split the data into training and testing sets (e.g., 80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)
# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

